@page "/contact"
@implements IDisposable
@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>List Contacts</PageTitle>

@if (records == null)
{
    @if (loadError == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p class="text-danger">@loadError</p>
    }
}
else
{
    <div class="mb-3">
        <MudText Typo="Typo.h3">Contacts</MudText>
    </div>

    <MudStack AlignItems="AlignItems.End" Class="mb-3">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
    </MudStack>

    <MudDataGrid T="Contact" @ref="grid" ServerData="(new Func<GridState<Contact>, Task<GridData<Contact>>>(ServerReload))" Filterable="true">
        <Columns>
            <PropertyColumn Property="x => x!.Id" Title="Id" />
            <PropertyColumn Property="x => x!.FirstName" Title="First Name" />
            <PropertyColumn Property="x => x!.LastName" Title="Last Name" />
            <PropertyColumn Property="x => x!.Birthday" Title="Birth Day" />
            <PropertyColumn Property="x => x!.Email" Title="Email" />
            <PropertyColumn Property="x => x!.PhoneNumber" Title="Phone Number" />
            <PropertyColumn Property="x => x!.StreetAddress" Title="Street Address" />
            <PropertyColumn Property="x => x!.City" Title="City" />
            <PropertyColumn Property="x => x!.State" Title="State" />
            <PropertyColumn Property="x => x!.Zip" Title="Zip" />
            <TemplateColumn StickyRight="true" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" Title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Contact" />
        </PagerContent>
    </MudDataGrid>
}


<script>
    window.downloadFromBase64 = function (base64, filename) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var byteCharacters = atob(base64);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: "application/octet-stream" });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = filename;
        a.click();
        window.URL.revokeObjectURL(url);
    };
</script>

@code {
    private MudDataGrid<Contact>? grid;
    private string? _searchString;

    private string? loadError;

    private Contact[] records;

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += LocationChanged;

        await LoadDataAsync();
    }

    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        records = null;
        StateHasChanged();

        await LoadDataAsync();
        StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            PagedResultDto<Contact> res = await AppService.ListContactsAsync("", 0, null);
            records = res.Items.ToArray();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<GridData<Contact>> ServerReload(GridState<Contact> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        string? orderby = "";
        var RecordCount = 0;

        if (state.SortDefinitions.Any())
        {
            var firstSortDefinition = state.SortDefinitions.First();
            var direction = firstSortDefinition.Descending;
            if (direction)
                orderby = firstSortDefinition.SortBy + " desc";
            else
                orderby = firstSortDefinition.SortBy;
        }

        try
        {
            PagedResultDto<Contact> res = await AppService.ListContactsAsync(orderby, skip, top);

            records = res.Items.ToArray();
            RecordCount = (int)res.TotalCount;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        return new() { TotalItems = RecordCount, Items = records?.ToList() ?? Enumerable.Empty<Contact>() };
    }


    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddContact>("Add Contact", dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnEdit(Contact record)
    {
        DialogParameters<UpdateContact> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<UpdateContact>("Update Contact", dialogParams, dialogOptions);
        await Task.Delay(1000);  // Force UI rerender
        StateHasChanged();
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnDelete(Contact record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteContactAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
    
    private void SearchChanged(string Value)
    {
        if (Value.EndsWith("."))
        {
            return;
        }
        _searchString = Value.ToString().ToLower();
        try
        {
            if (_searchString.Length > 18)
            {
                DateTimeOffset dateTime = DateTime.Parse(_searchString);
                _searchString = dateTime.ToString("yyyy-MM-ddTHH:mm:ssK");
                //Console.WriteLine(_searchString);
            }
        }
        catch
        {
            return;
        }
        grid?.ReloadServerData();
    }

    private async Task ExportAllToCSV()
    {
        AppService.ODataResult<Contact>? result = null;

        try
        {
            // Fetch all data from the OData service without any filters or restrictions
            result = await AppService.ListContactODataAsync(null, null, null, null, true, null);

            if (result != null && result?.Value != null)
            {
                var ar = result?.Value.ToList().Select(x => new
                {
                    x.Id,
                    x.FirstName,
                    x.LastName,
                    x.Birthday,
                    x.PhoneNumber,
                    x.Email,
                    x.StreetAddress,
                    x.City,
                    x.State,
                    x.Zip,
                });

                using var memoryStream = new MemoryStream();
                using (var writer = new StreamWriter(memoryStream))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(ar); // use CSVHelper to write the records to the CSV file
                }
                // Convert MemoryStream to ByteArray
                var byteArray = memoryStream.ToArray();

                // Convert ByteArray to Base64String
                var base64 = Convert.ToBase64String(byteArray);

                // Trigger file download
                await JSRuntime.InvokeVoidAsync("downloadFromBase64", base64, "Contact_"+ System.DateTime.Now.ToString("yyyyMMddHHmmss") +".csv");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}

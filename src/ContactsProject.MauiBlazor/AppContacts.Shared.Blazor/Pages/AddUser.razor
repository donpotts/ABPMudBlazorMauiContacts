@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@attribute [Authorize]

<EditForm Model="@registerModel" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add User</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="registerModel.UserName" For="@(() => registerModel.UserName)" Label="User Name" />
            <MudTextField @bind-Value="registerModel.Password" For="@(() => registerModel.Password)" Label="Password" InputType="InputType.Password" />
            <MudTextField @bind-Value="registerModel.Name" For="@(() => registerModel.Name)" Label="First Name" />
            <MudTextField @bind-Value="registerModel.Surname" For="@(() => registerModel.Surname)" Label="Last Name" />
            <MudTextField @bind-Value="registerModel.Email" For="@(() => registerModel.Email)" Label="Email" />
            <MudTextField @bind-Value="registerModel.PhoneNumber" For="@(() => registerModel.PhoneNumber)" Label="Phone Number" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private User registerModel = new();

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            registerModel.LockoutEnabled = true;
            registerModel.RoleNames = new List<string>();
            registerModel.RoleNames.Add("admin");
            registerModel.ExtraProperties = new Dictionary<string, object>();

            await AppService.RegisterUserAsync(registerModel);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    // private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    // {
    //     if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
    //     {
    //         Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
    //         return null;
    //     }

    //     var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

    //     try
    //     {
    //         return await AppService.UploadImageAsync(image);
    //     }
    //     catch (Exception ex)
    //     {
    //         Snackbar.Add(ex.Message, Severity.Error);
    //     }

    //     return null;
    // }
}
